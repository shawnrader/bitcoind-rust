/*****************************************************************************************************
 * Copyright (c) 2013, 2014, 2017, 2021 Pieter Wuille, Andrew Poelstra, Jonas Nick, Russell O'Connor *
 * Distributed under the MIT software license, see the accompanying                                  *
 * file COPYING or https://www.opensource.org/licenses/mit-license.php.                              *
 *****************************************************************************************************/

use std::fs::File;
use std::io::{self, Write};

// Placeholder types and constants for the Rust version
type Secp256k1GeStorage = [u32; 16];
const ECMULT_TABLE_SIZE: fn(usize) -> usize = |i| 1 << (i - 2);
const ECMULT_WINDOW_SIZE: usize = 15;

// Placeholder for the secp256k1_ge_const_g type
struct Secp256k1Ge;
static SECP256K1_GE_CONST_G: Secp256k1Ge = Secp256k1Ge;

// Placeholder for the secp256k1_ecmult_compute_two_tables function
fn secp256k1_ecmult_compute_two_tables(
    table: &mut [Secp256k1GeStorage],
    table_128: &mut [Secp256k1GeStorage],
    window_g: usize,
    ge_const_g: &Secp256k1Ge,
) {
    // Implementation would go here
}

fn print_table(fp: &mut File, name: &str, window_g: usize, table: &[Secp256k1GeStorage]) -> io::Result<()> {
    writeln!(fp, "pub const {}: [Secp256k1GeStorage; {}] = [", name, ECMULT_TABLE_SIZE(window_g))?;
    writeln!(
        fp,
        "    Secp256k1GeStorage([0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}])",
        table[0][0], table[0][1], table[0][2], table[0][3],
        table[0][4], table[0][5], table[0][6], table[0][7],
        table[0][8], table[0][9], table[0][10], table[0][11],
        table[0][12], table[0][13], table[0][14], table[0][15],
    )?;

    for j in 1..ECMULT_TABLE_SIZE(window_g) {
        writeln!(
            fp,
            "    ,Secp256k1GeStorage([0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}, 0x{:08x}])",
            table[j][0], table[j][1], table[j][2], table[j][3],
            table[j][4], table[j][5], table[j][6], table[j][7],
            table[j][8], table[j][9], table[j][10], table[j][11],
            table[j][12], table[j][13], table[j][14], table[j][15],
        )?;
    }
    writeln!(fp, "];")?;
    Ok(())
}

fn print_two_tables(fp: &mut File, window_g: usize) -> io::Result<()> {
    let mut table = vec![Secp256k1GeStorage::default(); ECMULT_TABLE_SIZE(window_g)];
    let mut table_128 = vec![Secp256k1GeStorage::default(); ECMULT_TABLE_SIZE(window_g)];

    secp256k1_ecmult_compute_two_tables(&mut table, &mut table_128, window_g, &SECP256K1_GE_CONST_G);

    print_table(fp, "SECP256K1_PRE_G", window_g, &table)?;
    print_table(fp, "SECP256K1_PRE_G_128", window_g, &table_128)?;

    Ok(())
}

fn main() -> io::Result<()> {
    let window_g = if ECMULT_WINDOW_SIZE < 15 { 15 } else { ECMULT_WINDOW_SIZE };
    let mut fp = File::create("src/secp256k1/precomputed_ecmult.rs")?;

    writeln!(fp, "// This file was automatically generated by precompute_ecmult.")?;
    writeln!(fp, "// This file contains an array SECP256K1_PRE_G with odd multiples of the base point G and")?;
    writeln!(fp, "// an array SECP256K1_PRE_G_128 with odd multiples of 2^128*G for accelerating the computation of a*P + b*G.")?;
    writeln!(fp)?;
    writeln!(fp, "use super::Secp256k1GeStorage;")?;
    writeln!(fp)?;

    print_two_tables(&mut fp, window_g)?;

    Ok(())
}
